"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/shamir-secret-sharing";
exports.ids = ["vendor-chunks/shamir-secret-sharing"];
exports.modules = {

/***/ "(ssr)/./node_modules/shamir-secret-sharing/esm/csprng.node.js":
/*!***************************************************************!*\
  !*** ./node_modules/shamir-secret-sharing/esm/csprng.node.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomBytes: () => (/* binding */ getRandomBytes)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n\nfunction getRandomBytes(numBytes) {\n    return new Uint8Array((0,node_crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(numBytes).buffer);\n}\n//# sourceMappingURL=csprng.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2hhbWlyLXNlY3JldC1zaGFyaW5nL2VzbS9jc3Bybmcubm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUNuQztBQUNQLDBCQUEwQix3REFBVztBQUNyQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2hhbWlyLXNlY3JldC1zaGFyaW5nL2VzbS9jc3Bybmcubm9kZS5qcz8wOGMyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnbm9kZTpjcnlwdG8nO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUJ5dGVzKG51bUJ5dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHJhbmRvbUJ5dGVzKG51bUJ5dGVzKS5idWZmZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3Nwcm5nLm5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shamir-secret-sharing/esm/csprng.node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/shamir-secret-sharing/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/shamir-secret-sharing/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   combine: () => (/* binding */ combine),\n/* harmony export */   split: () => (/* binding */ split)\n/* harmony export */ });\n/* harmony import */ var shamir_secret_sharing_csprng__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shamir-secret-sharing/csprng */ \"(ssr)/./node_modules/shamir-secret-sharing/esm/csprng.node.js\");\n\n// The Polynomial used is: x⁸ + x⁴ + x³ + x + 1\n//\n// Lookup tables pulled from:\n//\n//     * https://github.com/hashicorp/vault/blob/9d46671659cbfe7bbd3e78d1073dfb22936a4437/shamir/tables.go\n//     * http://www.samiam.org/galois.html\n//\n// 0xe5 (229) is used as the generator.\n// Provides log(X)/log(g) at each index X.\nconst LOG_TABLE = new Uint8Array([\n    0x00, 0xff, 0xc8, 0x08, 0x91, 0x10, 0xd0, 0x36, 0x5a, 0x3e, 0xd8, 0x43, 0x99, 0x77, 0xfe, 0x18,\n    0x23, 0x20, 0x07, 0x70, 0xa1, 0x6c, 0x0c, 0x7f, 0x62, 0x8b, 0x40, 0x46, 0xc7, 0x4b, 0xe0, 0x0e,\n    0xeb, 0x16, 0xe8, 0xad, 0xcf, 0xcd, 0x39, 0x53, 0x6a, 0x27, 0x35, 0x93, 0xd4, 0x4e, 0x48, 0xc3,\n    0x2b, 0x79, 0x54, 0x28, 0x09, 0x78, 0x0f, 0x21, 0x90, 0x87, 0x14, 0x2a, 0xa9, 0x9c, 0xd6, 0x74,\n    0xb4, 0x7c, 0xde, 0xed, 0xb1, 0x86, 0x76, 0xa4, 0x98, 0xe2, 0x96, 0x8f, 0x02, 0x32, 0x1c, 0xc1,\n    0x33, 0xee, 0xef, 0x81, 0xfd, 0x30, 0x5c, 0x13, 0x9d, 0x29, 0x17, 0xc4, 0x11, 0x44, 0x8c, 0x80,\n    0xf3, 0x73, 0x42, 0x1e, 0x1d, 0xb5, 0xf0, 0x12, 0xd1, 0x5b, 0x41, 0xa2, 0xd7, 0x2c, 0xe9, 0xd5,\n    0x59, 0xcb, 0x50, 0xa8, 0xdc, 0xfc, 0xf2, 0x56, 0x72, 0xa6, 0x65, 0x2f, 0x9f, 0x9b, 0x3d, 0xba,\n    0x7d, 0xc2, 0x45, 0x82, 0xa7, 0x57, 0xb6, 0xa3, 0x7a, 0x75, 0x4f, 0xae, 0x3f, 0x37, 0x6d, 0x47,\n    0x61, 0xbe, 0xab, 0xd3, 0x5f, 0xb0, 0x58, 0xaf, 0xca, 0x5e, 0xfa, 0x85, 0xe4, 0x4d, 0x8a, 0x05,\n    0xfb, 0x60, 0xb7, 0x7b, 0xb8, 0x26, 0x4a, 0x67, 0xc6, 0x1a, 0xf8, 0x69, 0x25, 0xb3, 0xdb, 0xbd,\n    0x66, 0xdd, 0xf1, 0xd2, 0xdf, 0x03, 0x8d, 0x34, 0xd9, 0x92, 0x0d, 0x63, 0x55, 0xaa, 0x49, 0xec,\n    0xbc, 0x95, 0x3c, 0x84, 0x0b, 0xf5, 0xe6, 0xe7, 0xe5, 0xac, 0x7e, 0x6e, 0xb9, 0xf9, 0xda, 0x8e,\n    0x9a, 0xc9, 0x24, 0xe1, 0x0a, 0x15, 0x6b, 0x3a, 0xa0, 0x51, 0xf4, 0xea, 0xb2, 0x97, 0x9e, 0x5d,\n    0x22, 0x88, 0x94, 0xce, 0x19, 0x01, 0x71, 0x4c, 0xa5, 0xe3, 0xc5, 0x31, 0xbb, 0xcc, 0x1f, 0x2d,\n    0x3b, 0x52, 0x6f, 0xf6, 0x2e, 0x89, 0xf7, 0xc0, 0x68, 0x1b, 0x64, 0x04, 0x06, 0xbf, 0x83, 0x38,\n]);\n// Provides the exponentiation value at each index X.\nconst EXP_TABLE = new Uint8Array([\n    0x01, 0xe5, 0x4c, 0xb5, 0xfb, 0x9f, 0xfc, 0x12, 0x03, 0x34, 0xd4, 0xc4, 0x16, 0xba, 0x1f, 0x36,\n    0x05, 0x5c, 0x67, 0x57, 0x3a, 0xd5, 0x21, 0x5a, 0x0f, 0xe4, 0xa9, 0xf9, 0x4e, 0x64, 0x63, 0xee,\n    0x11, 0x37, 0xe0, 0x10, 0xd2, 0xac, 0xa5, 0x29, 0x33, 0x59, 0x3b, 0x30, 0x6d, 0xef, 0xf4, 0x7b,\n    0x55, 0xeb, 0x4d, 0x50, 0xb7, 0x2a, 0x07, 0x8d, 0xff, 0x26, 0xd7, 0xf0, 0xc2, 0x7e, 0x09, 0x8c,\n    0x1a, 0x6a, 0x62, 0x0b, 0x5d, 0x82, 0x1b, 0x8f, 0x2e, 0xbe, 0xa6, 0x1d, 0xe7, 0x9d, 0x2d, 0x8a,\n    0x72, 0xd9, 0xf1, 0x27, 0x32, 0xbc, 0x77, 0x85, 0x96, 0x70, 0x08, 0x69, 0x56, 0xdf, 0x99, 0x94,\n    0xa1, 0x90, 0x18, 0xbb, 0xfa, 0x7a, 0xb0, 0xa7, 0xf8, 0xab, 0x28, 0xd6, 0x15, 0x8e, 0xcb, 0xf2,\n    0x13, 0xe6, 0x78, 0x61, 0x3f, 0x89, 0x46, 0x0d, 0x35, 0x31, 0x88, 0xa3, 0x41, 0x80, 0xca, 0x17,\n    0x5f, 0x53, 0x83, 0xfe, 0xc3, 0x9b, 0x45, 0x39, 0xe1, 0xf5, 0x9e, 0x19, 0x5e, 0xb6, 0xcf, 0x4b,\n    0x38, 0x04, 0xb9, 0x2b, 0xe2, 0xc1, 0x4a, 0xdd, 0x48, 0x0c, 0xd0, 0x7d, 0x3d, 0x58, 0xde, 0x7c,\n    0xd8, 0x14, 0x6b, 0x87, 0x47, 0xe8, 0x79, 0x84, 0x73, 0x3c, 0xbd, 0x92, 0xc9, 0x23, 0x8b, 0x97,\n    0x95, 0x44, 0xdc, 0xad, 0x40, 0x65, 0x86, 0xa2, 0xa4, 0xcc, 0x7f, 0xec, 0xc0, 0xaf, 0x91, 0xfd,\n    0xf7, 0x4f, 0x81, 0x2f, 0x5b, 0xea, 0xa8, 0x1c, 0x02, 0xd1, 0x98, 0x71, 0xed, 0x25, 0xe3, 0x24,\n    0x06, 0x68, 0xb3, 0x93, 0x2c, 0x6f, 0x3e, 0x6c, 0x0a, 0xb8, 0xce, 0xae, 0x74, 0xb1, 0x42, 0xb4,\n    0x1e, 0xd3, 0x49, 0xe9, 0x9c, 0xc8, 0xc6, 0xc7, 0x22, 0x6e, 0xdb, 0x20, 0xbf, 0x43, 0x51, 0x52,\n    0x66, 0xb2, 0x76, 0x60, 0xda, 0xc5, 0xf3, 0xf6, 0xaa, 0xcd, 0x9a, 0xa0, 0x75, 0x54, 0x0e, 0x01,\n]);\n// Combines two numbers in GF(2^8).\n// This can be used for both addition and subtraction.\nfunction add(a, b) {\n    if (!Number.isInteger(a) || a < 0 || a > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    if (!Number.isInteger(b) || b < 0 || b > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    return a ^ b;\n}\n// Divides two numbers in GF(2^8).\nfunction div(a, b) {\n    if (!Number.isInteger(a) || a < 0 || a > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    if (!Number.isInteger(b) || b < 0 || b > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    // This should never happen\n    if (b === 0) {\n        throw new Error('cannot divide by zero');\n    }\n    const logA = LOG_TABLE[a];\n    const logB = LOG_TABLE[b];\n    const diff = (logA - logB + 255) % 255;\n    const result = EXP_TABLE[diff];\n    return a === 0 ? 0 : result;\n}\n// Multiplies two numbers in GF(2^8).\nfunction mult(a, b) {\n    if (!Number.isInteger(a) || a < 0 || a > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    if (!Number.isInteger(b) || b < 0 || b > 255) {\n        throw new RangeError('Number is out of Uint8 range');\n    }\n    const logA = LOG_TABLE[a];\n    const logB = LOG_TABLE[b];\n    const sum = (logA + logB) % 255;\n    const result = EXP_TABLE[sum];\n    return a === 0 || b === 0 ? 0 : result;\n}\n// Takes N sample points and returns the value at a given x using a lagrange interpolation.\nfunction interpolatePolynomial(xSamples, ySamples, x) {\n    if (xSamples.length !== ySamples.length) {\n        throw new Error('sample length mistmatch');\n    }\n    const limit = xSamples.length;\n    let basis = 0;\n    let result = 0;\n    for (let i = 0; i < limit; i++) {\n        basis = 1;\n        for (let j = 0; j < limit; ++j) {\n            if (i === j) {\n                continue;\n            }\n            const num = add(x, xSamples[j]);\n            const denom = add(xSamples[i], xSamples[j]);\n            const term = div(num, denom);\n            basis = mult(basis, term);\n        }\n        result = add(result, mult(ySamples[i], basis));\n    }\n    return result;\n}\n// Evaluates a polynomial with the given x using Horner's method.\nfunction evaluate(coefficients, x, degree) {\n    if (x === 0) {\n        throw new Error('cannot evaluate secret polynomial at zero');\n    }\n    let result = coefficients[degree];\n    for (let i = degree - 1; i >= 0; i--) {\n        const coefficient = coefficients[i];\n        result = add(mult(result, x), coefficient);\n    }\n    return result;\n}\nfunction getRandomByte() {\n    return (0,shamir_secret_sharing_csprng__WEBPACK_IMPORTED_MODULE_0__.getRandomBytes)(1)[0];\n}\nfunction getNonZeroRandomByte() {\n    while (true) {\n        const byte = getRandomByte();\n        if (byte > 0) {\n            return byte;\n        }\n    }\n}\n// Creates a pseudo-random set of coefficients for a polynomial.\nfunction newCoefficients(intercept, degree) {\n    const coefficients = new Uint8Array(degree + 1);\n    // The first byte is always the intercept\n    coefficients[0] = intercept;\n    for (let i = 1; i <= degree; i++) {\n        // degree is equal to t-1, where t is the threshold of required shares.\n        // The coefficient at t-1 cannot equal 0.\n        const coefficientTMinus1 = i === degree;\n        coefficients[i] = coefficientTMinus1 ? getNonZeroRandomByte() : getRandomByte();\n    }\n    return coefficients;\n}\n// Creates a set of values from [1, 256).\n// Returns a psuedo-random shuffling of the set.\nfunction newCoordinates() {\n    const coordinates = new Uint8Array(255);\n    for (let i = 0; i < 255; i++) {\n        coordinates[i] = i + 1;\n    }\n    // Pseudo-randomize the array of coordinates.\n    //\n    // This impl maps almost perfectly because both of the lists (coordinates and randomIndices)\n    // have a length of 255 and byte values are between 0 and 255 inclusive. The only value that\n    // does not map neatly here is if the random byte is 255, since that value used as an index\n    // would be out of bounds. Thus, for bytes whose value is 255, wrap around to 0.\n    const randomIndices = (0,shamir_secret_sharing_csprng__WEBPACK_IMPORTED_MODULE_0__.getRandomBytes)(255);\n    for (let i = 0; i < 255; i++) {\n        const j = randomIndices[i] % 255; // Make sure to handle the case where the byte is 255.\n        const temp = coordinates[i];\n        coordinates[i] = coordinates[j];\n        coordinates[j] = temp;\n    }\n    return coordinates;\n}\n// Helpers for declarative argument validation.\nconst AssertArgument = {\n    instanceOf(object, constructor, message) {\n        if (object.constructor !== constructor) {\n            throw new TypeError(message);\n        }\n    },\n    inRange(n, start, until, message) {\n        if (!(start < until && n >= start && n < until)) {\n            throw new RangeError(message);\n        }\n    },\n    greaterThanOrEqualTo(a, b, message) {\n        if (a < b) {\n            throw new Error(message);\n        }\n    },\n    equalTo(a, b, message) {\n        if (a !== b) {\n            throw new Error(message);\n        }\n    },\n};\n/**\n * Splits a `secret` into `shares` number of shares, requiring `threshold` of them to reconstruct `secret`.\n *\n * @param secret The secret value to split into shares.\n * @param shares The total number of shares to split `secret` into. Must be at least 2 and at most 255.\n * @param threshold The minimum number of shares required to reconstruct `secret`. Must be at least 2 and at most 255.\n * @returns A list of `shares` shares.\n */\nasync function split(secret, shares, threshold) {\n    // secret must be a non-empty Uint8Array\n    AssertArgument.instanceOf(secret, Uint8Array, 'secret must be a Uint8Array');\n    AssertArgument.greaterThanOrEqualTo(secret.byteLength, 1, 'secret cannot be empty');\n    // shares must be a number in the range [2, 256)\n    AssertArgument.instanceOf(shares, Number, 'shares must be a number');\n    AssertArgument.inRange(shares, 2, 256, 'shares must be at least 2 and at most 255');\n    // threshold must be a number in the range [2, 256)\n    AssertArgument.instanceOf(threshold, Number, 'threshold must be a number');\n    AssertArgument.inRange(threshold, 2, 256, 'threshold must be at least 2 and at most 255');\n    // total number of shares must be greater than or equal to the required threshold\n    AssertArgument.greaterThanOrEqualTo(shares, threshold, 'shares cannot be less than threshold');\n    const result = [];\n    const secretLength = secret.byteLength;\n    const xCoordinates = newCoordinates();\n    for (let i = 0; i < shares; i++) {\n        const share = new Uint8Array(secretLength + 1);\n        share[secretLength] = xCoordinates[i];\n        result.push(share);\n    }\n    const degree = threshold - 1;\n    for (let i = 0; i < secretLength; i++) {\n        const byte = secret[i];\n        const coefficients = newCoefficients(byte, degree);\n        for (let j = 0; j < shares; ++j) {\n            const x = xCoordinates[j];\n            const y = evaluate(coefficients, x, degree);\n            result[j][i] = y;\n        }\n    }\n    return result;\n}\n/**\n * Combines `shares` to reconstruct the secret.\n *\n * @param shares A list of shares to reconstruct the secret from. Must be at least 2 and at most 255.\n * @returns The reconstructed secret.\n */\nasync function combine(shares) {\n    // Shares must be an array with length in the range [2, 256)\n    AssertArgument.instanceOf(shares, Array, 'shares must be an Array');\n    AssertArgument.inRange(shares.length, 2, 256, 'shares must have at least 2 and at most 255 elements');\n    // Shares must be a Uint8Array with at least 2 bytes and all shares must have the same byte length.\n    const share1 = shares[0];\n    AssertArgument.instanceOf(share1, Uint8Array, 'each share must be a Uint8Array');\n    for (const share of shares) {\n        AssertArgument.instanceOf(share, Uint8Array, 'each share must be a Uint8Array');\n        AssertArgument.greaterThanOrEqualTo(share.byteLength, 2, 'each share must be at least 2 bytes');\n        AssertArgument.equalTo(share.byteLength, share1.byteLength, 'all shares must have the same byte length');\n    }\n    const sharesLength = shares.length;\n    const shareLength = share1.byteLength;\n    // This will be our reconstructed secret\n    const secretLength = shareLength - 1;\n    const secret = new Uint8Array(secretLength);\n    const xSamples = new Uint8Array(sharesLength);\n    const ySamples = new Uint8Array(sharesLength);\n    const samples = new Set();\n    for (let i = 0; i < sharesLength; i++) {\n        const share = shares[i];\n        const sample = share[shareLength - 1];\n        // The last byte of each share should be a unique value between 1-255 inclusive.\n        if (samples.has(sample)) {\n            throw new Error('shares must contain unique values but a duplicate was found');\n        }\n        samples.add(sample);\n        xSamples[i] = sample;\n    }\n    // Reconstruct each byte\n    for (let i = 0; i < secretLength; i++) {\n        // Set the y value for each sample\n        for (let j = 0; j < sharesLength; ++j) {\n            ySamples[j] = shares[j][i];\n        }\n        // Interpolate the polynomial and compute the value at 0\n        secret[i] = interpolatePolynomial(xSamples, ySamples, 0);\n    }\n    return secret;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shamir-secret-sharing/esm/index.js\n");

/***/ })

};
;