"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/votes/[id]/page",{

/***/ "(app-pages-browser)/./contracts/query.ts":
/*!****************************!*\
  !*** ./contracts/query.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findObjectTypeName: () => (/* binding */ findObjectTypeName),\n/* harmony export */   getAllowlists: () => (/* binding */ getAllowlists),\n/* harmony export */   getMultiVotePools: () => (/* binding */ getMultiVotePools),\n/* harmony export */   getOwnedVotePool: () => (/* binding */ getOwnedVotePool),\n/* harmony export */   getVotePoolById: () => (/* binding */ getVotePoolById),\n/* harmony export */   getVotePoolState: () => (/* binding */ getVotePoolState),\n/* harmony export */   queryState: () => (/* binding */ queryState),\n/* harmony export */   queryVoteBox: () => (/* binding */ queryVoteBox)\n/* harmony export */ });\n/* harmony import */ var _mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/sui/utils */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/utils/sui-types.js\");\n/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ \"(app-pages-browser)/./contracts/index.ts\");\n\n\n//TODO:加上cursor和翻页？\nconst getVotePoolState = async ()=>{\n    const events = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.queryEvents({\n        query: {\n            MoveEventType: \"\".concat(_index__WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID, \"::shadowvote::VotePoolCreated\")\n        }\n    });\n    const events_woal = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.queryEvents({\n        query: {\n            MoveEventType: \"\".concat(_index__WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID, \"::votepool_wo_al::VotePoolCreated\")\n        }\n    });\n    const rawVotepools = [\n        ...events.data,\n        ...events_woal.data\n    ];\n    const votePoolState = rawVotepools.map((event)=>{\n        const parsedEvent = event.parsedJson;\n        return parsedEvent;\n    });\n    return votePoolState;\n};\nconst getMultiVotePools = async (vote_ids)=>{\n    const rawData = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.multiGetObjects({\n        ids: vote_ids,\n        options: {\n            showContent: true\n        }\n    });\n    const votePools = rawData.map((obj)=>{\n        var _obj_data;\n        const parsedVotePool = (_obj_data = obj.data) === null || _obj_data === void 0 ? void 0 : _obj_data.content;\n        if (!('fields' in parsedVotePool) || !parsedVotePool) {\n            throw new Error(\"Invalid vote pool data structure\");\n        }\n        return parsedVotePool.fields;\n    });\n    return votePools;\n};\nconst getAllowlists = async (owner)=>{\n    if (!(0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)(owner)) {\n        throw new Error(\"Invalid Sui address\");\n    }\n    // load all caps\n    const res = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getOwnedObjects({\n        owner,\n        options: {\n            showContent: true,\n            showType: true\n        },\n        filter: {\n            StructType: \"\".concat(_index__WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID, \"::allowlist::Cap\")\n        }\n    });\n    //Store caps with their corresponding allowlist IDs\n    const capsMap = {};\n    // find the allowlist id\n    const allowlistIds = res.data.map((obj)=>{\n        const objData = obj.data;\n        const content = objData.content;\n        if (content.dataType == \"moveObject\") {\n            const fields = content.fields;\n            if (fields && 'allowlist_id' in fields) {\n                capsMap[fields.allowlist_id] = objData.objectId;\n                return fields.allowlist_id;\n            }\n        }\n    }).filter((id)=>id !== undefined);\n    const rawAllowlist = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.multiGetObjects({\n        ids: allowlistIds,\n        options: {\n            showContent: true\n        }\n    });\n    const allowlistsWithCapPromise = rawAllowlist.map(async (obj)=>{\n        var _obj_data;\n        const parsedAllowlist = (_obj_data = obj.data) === null || _obj_data === void 0 ? void 0 : _obj_data.content;\n        if (!('fields' in parsedAllowlist) || !parsedAllowlist) {\n            throw new Error(\"Invalid allowlist data structure\");\n        }\n        const allowlist = parsedAllowlist.fields;\n        const allowlistId = allowlist.id.id;\n        const capId = capsMap[allowlistId];\n        if (!capId) {\n            throw new Error(\"Cap not found for allowlist \".concat(allowlistId));\n        }\n        const allowlistWithCap = {\n            allowlist,\n            capId\n        };\n        return allowlistWithCap;\n    });\n    const allowlistsWithCap = await Promise.all(allowlistsWithCapPromise);\n    return allowlistsWithCap;\n};\n//用不上咧，先放着\nconst getOwnedVotePool = async (address)=>{\n    if (!(0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)(address)) {\n        throw new Error(\"Invalid Sui address\");\n    }\n    try {\n        let cursor = null;\n        let hasNextPage = true;\n        let allObjects = [];\n        while(hasNextPage){\n            const response = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getOwnedObjects({\n                owner: address,\n                cursor,\n                options: {\n                    showContent: true\n                },\n                filter: {\n                    StructType: \"\".concat(_index__WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID, \"::shadowvote::VotePool\")\n                }\n            });\n            allObjects = allObjects.concat(response.data);\n            hasNextPage = response.hasNextPage;\n            var _response_nextCursor;\n            cursor = (_response_nextCursor = response.nextCursor) !== null && _response_nextCursor !== void 0 ? _response_nextCursor : null;\n        }\n        const votePoolsData = allObjects.map((obj)=>{\n            var _obj_data;\n            const parsedVotePool = (_obj_data = obj.data) === null || _obj_data === void 0 ? void 0 : _obj_data.content;\n            if (!('fields' in parsedVotePool) || !parsedVotePool) {\n                throw new Error(\"Invalid vote pool data structure\");\n            }\n            return parsedVotePool.fields;\n        });\n        return votePoolsData;\n    } catch (error) {\n        console.error(\"Error fetching vote pool:\", error);\n        throw error;\n    }\n};\nconst getVotePoolById = async (voetId)=>{\n    var _rawVotePoolData_data;\n    if (!(0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.isValidSuiAddress)(voetId)) {\n        throw new Error(\"Invalid Sui address\");\n    }\n    const rawVotePoolData = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getObject({\n        id: voetId,\n        options: {\n            showContent: true,\n            showType: true\n        }\n    });\n    const parsedVotePool = (_rawVotePoolData_data = rawVotePoolData.data) === null || _rawVotePoolData_data === void 0 ? void 0 : _rawVotePoolData_data.content;\n    if (!('fields' in parsedVotePool) || !parsedVotePool) {\n        throw new Error(\"Invalid vote pool data structure\");\n    }\n    let is_allowlist = true;\n    if (parsedVotePool.type.includes(\"::votepool_wo_al::VotePool_WOAl\")) is_allowlist = false;\n    return [\n        parsedVotePool.fields,\n        is_allowlist\n    ];\n};\nconst queryState = async ()=>{\n    const state = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getObject({\n        id: _index__WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.stateID,\n        options: {\n            showContent: true\n        }\n    });\n    return state;\n};\nconst queryVoteBox = async (voteBoxId)=>{\n    var _voteBox_data;\n    const voteBox = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getObject({\n        id: voteBoxId,\n        options: {\n            showContent: true\n        }\n    });\n    const parsedVoteBox = (_voteBox_data = voteBox.data) === null || _voteBox_data === void 0 ? void 0 : _voteBox_data.content;\n    if (!('fields' in parsedVoteBox) || !parsedVoteBox || parsedVoteBox.dataType !== \"moveObject\") {\n        throw new Error(\"Invalid vote box data structure\");\n    }\n    const voteBoxDataFields = parsedVoteBox.fields;\n    if (!voteBoxDataFields.votes || !Array.isArray(voteBoxDataFields.votes)) {\n        throw new Error(\"Invalid vote box data structure\");\n    }\n    const voteboxData = voteBoxDataFields.votes.map((vote)=>{\n        const parsedVote = vote.fields;\n        const encryptedVote = {\n            voter: parsedVote.voter,\n            vote: parsedVote.vote\n        };\n        return encryptedVote;\n    });\n    return voteboxData;\n};\nconst findObjectTypeName = async (objectId)=>{\n    var _objData_data;\n    const objData = await _index__WEBPACK_IMPORTED_MODULE_0__.suiClient.getObject({\n        id: objectId,\n        options: {\n            showType: true,\n            showContent: true\n        }\n    });\n    const parsedObj = (_objData_data = objData.data) === null || _objData_data === void 0 ? void 0 : _objData_data.content;\n    if (!(parsedObj.dataType == \"moveObject\") || !parsedObj) {\n        throw new Error(\"Invalid object data structure\");\n    }\n    return parsedObj.type;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contracts/query.ts\n"));

/***/ })

});