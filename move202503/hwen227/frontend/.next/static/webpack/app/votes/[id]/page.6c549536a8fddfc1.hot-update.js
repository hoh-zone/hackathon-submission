"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/votes/[id]/page",{

/***/ "(app-pages-browser)/./contracts/seal.ts":
/*!***************************!*\
  !*** ./contracts/seal.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructMoveCall: () => (/* binding */ constructMoveCall),\n/* harmony export */   decryptVotePool: () => (/* binding */ decryptVotePool),\n/* harmony export */   encryptUserVote: () => (/* binding */ encryptUserVote),\n/* harmony export */   encryptVotePool: () => (/* binding */ encryptVotePool),\n/* harmony export */   test_decrptedVoteBox: () => (/* binding */ test_decrptedVoteBox)\n/* harmony export */ });\n/* harmony import */ var _mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @mysten/sui/utils */ \"(app-pages-browser)/./node_modules/@mysten/bcs/dist/esm/hex.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"(app-pages-browser)/./contracts/index.ts\");\n/* harmony import */ var _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @mysten/sui/transactions */ \"(app-pages-browser)/./node_modules/@mysten/sui/dist/esm/transactions/Transaction.js\");\n/* harmony import */ var _mysten_seal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @mysten/seal */ \"(app-pages-browser)/./node_modules/@mysten/seal/dist/esm/bcs.js\");\n/* harmony import */ var _mysten_seal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @mysten/seal */ \"(app-pages-browser)/./node_modules/@mysten/seal/dist/esm/error.js\");\n\n\n\n\n\nconst constructMoveCall = (packageId, allowlistId)=>{\n    return (tx, id)=>{\n        tx.moveCall({\n            target: \"\".concat(packageId, \"::allowlist::seal_approve\"),\n            arguments: [\n                tx.pure.vector('u8', (0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.fromHex)(id)),\n                tx.object(allowlistId),\n                tx.pure.string(\"\")\n            ]\n        });\n    };\n};\nconst encryptVotePool = async (votePool, allowlistID)=>{\n    const nonce = crypto.getRandomValues(new Uint8Array(5));\n    const policyObjectBytes = (0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.fromHex)(allowlistID);\n    const id = (0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.toHex)(new Uint8Array([\n        ...policyObjectBytes,\n        ...nonce\n    ]));\n    const encoder = new TextEncoder();\n    const serializedData = encoder.encode(JSON.stringify(votePool));\n    const { encryptedObject: encryptedBytes } = await ___WEBPACK_IMPORTED_MODULE_0__.sealClient.encrypt({\n        threshold: 2,\n        id,\n        packageId: ___WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID,\n        data: serializedData\n    });\n    return encryptedBytes;\n};\nconst encryptUserVote = async (option, voteboxID)=>{\n    const nonce = crypto.getRandomValues(new Uint8Array(5));\n    const policyObjectBytes = (0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.fromHex)(voteboxID);\n    const id = (0,_mysten_sui_utils__WEBPACK_IMPORTED_MODULE_1__.toHex)(new Uint8Array([\n        ...policyObjectBytes,\n        ...nonce\n    ]));\n    const encoder = new TextEncoder();\n    const { encryptedObject: encryptedBytes } = await ___WEBPACK_IMPORTED_MODULE_0__.sealClient.encrypt({\n        threshold: 2,\n        id,\n        packageId: ___WEBPACK_IMPORTED_MODULE_0__.networkConfig.testnet.variables.packageID,\n        data: encoder.encode(option)\n    });\n    return encryptedBytes;\n};\nconst decryptVotePool = async (sessionKey, encryptedData, moveCallConstructor)=>{\n    const fullId = _mysten_seal__WEBPACK_IMPORTED_MODULE_2__.EncryptedObject.parse(encryptedData).id;\n    const tx = new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_3__.Transaction();\n    moveCallConstructor(tx, fullId);\n    const txBytes = await tx.build({\n        client: ___WEBPACK_IMPORTED_MODULE_0__.suiClient,\n        onlyTransactionKind: true\n    });\n    try {\n        const decryptedData = await ___WEBPACK_IMPORTED_MODULE_0__.sealClient.decrypt({\n            data: encryptedData,\n            sessionKey,\n            txBytes\n        });\n        console.log(\"权限通过\");\n        return decodeVotePool(decryptedData);\n    } catch (err) {\n        console.log(err);\n        const errorMsg = err instanceof _mysten_seal__WEBPACK_IMPORTED_MODULE_4__.NoAccessError ? 'No access to decryption keys' : 'Unable to decrypt files, try again';\n        console.error(errorMsg, err);\n        return;\n    }\n};\nconst decodeVotePool = (data)=>{\n    try {\n        // 将Uint8Array转换为文本\n        const decoder = new TextDecoder();\n        const jsonString = decoder.decode(data);\n        // 解析JSON字符串成对象\n        const votePoolData = JSON.parse(jsonString);\n        return votePoolData;\n    } catch (error) {\n        console.error(\"解码VotePool失败:\", error);\n        throw new Error(\"无法解码VotePool数据\");\n    }\n};\n// const decrptedVoteBox = async (voteBoxData: SuiEncryptedVoteType[]) => {\n//     const validVotes = voteBoxData.filter((vote) => {\n//         vote.voter is Uint16Array\n//     }\n// }\nconst test_decrptedVoteBox = async (sessionKey, voteBoxData, moveCallConstructor)=>{\n    console.log(\"开始解密投票数据，数量:\", voteBoxData.length);\n    console.log(\"使用的sessionKey地址:\", sessionKey.getAddress());\n    // 顺序处理而不是并行处理，以避免可能的竞争条件\n    const voteResult = [];\n    for (const vote of voteBoxData){\n        try {\n            // 为每个投票创建新的事务对象\n            const tx = new _mysten_sui_transactions__WEBPACK_IMPORTED_MODULE_3__.Transaction();\n            tx.setSender(sessionKey.getAddress());\n            // 解析加密对象ID\n            const fullId = _mysten_seal__WEBPACK_IMPORTED_MODULE_2__.EncryptedObject.parse(new Uint8Array(vote.vote)).id;\n            console.log(\"正在处理加密投票ID:\", fullId);\n            moveCallConstructor(tx, fullId);\n            const txBytes = await tx.build({\n                client: ___WEBPACK_IMPORTED_MODULE_0__.suiClient,\n                onlyTransactionKind: true\n            });\n            console.log(\"交易构建完成，开始解密...\");\n            // 解密投票\n            const decryptedVote = await ___WEBPACK_IMPORTED_MODULE_0__.sealClient.decrypt({\n                data: new Uint8Array(vote.vote),\n                sessionKey,\n                txBytes\n            });\n            const decoder = new TextDecoder();\n            const voteNumber = decoder.decode(decryptedVote);\n            console.log(\"解密成功，投票索引:\", voteNumber);\n            voteResult.push(voteNumber);\n        } catch (err) {\n            console.error(\"解密单个投票时出错:\", err);\n            // 详细记录错误类型\n            if (err instanceof _mysten_seal__WEBPACK_IMPORTED_MODULE_4__.NoAccessError) {\n                console.error('无权访问解密密钥:', err);\n            } else {\n                console.error('解密失败，详细错误:', err);\n                // 如果可能，记录sessionKey的状态\n                try {\n                    var _sessionKey_getPersonalMessage, _sessionKey_isExpired;\n                    console.log(\"当前sessionKey状态:\", {\n                        address: sessionKey.getAddress(),\n                        hasSignature: Boolean((_sessionKey_getPersonalMessage = sessionKey.getPersonalMessage) === null || _sessionKey_getPersonalMessage === void 0 ? void 0 : _sessionKey_getPersonalMessage.call(sessionKey)),\n                        expired: ((_sessionKey_isExpired = sessionKey.isExpired) === null || _sessionKey_isExpired === void 0 ? void 0 : _sessionKey_isExpired.call(sessionKey)) || \"未知\"\n                    });\n                } catch (e) {\n                    console.log(\"无法检查sessionKey状态\", e);\n                }\n            }\n        }\n    }\n    console.log(\"解密完成: 成功 \".concat(voteResult.length, \"/\").concat(voteBoxData.length));\n    return voteResult;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./contracts/seal.ts\n"));

/***/ })

});